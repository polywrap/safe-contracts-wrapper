"""
import {
    Module,
    Connection,
    TxOptions
} into Ethers from "wrap://ens/ethers.wraps.eth:0.1.0"
import { Module } into EthersUtils from "wrap://ens/ethers.wraps.eth:utils@0.1.1"
import {
    SignSignature,
    SafeTransaction,
    SafeTransactionData,
    TransactionOptions,
    SafeTransactionOptionalProps
} from "wrap://safe/common"
"""

type Module {
    """
    Module to deploy and interact with the proxy factory smart-contract
    """
    createProxy(address: String!, safeMasterCopyAddress: String!, initializer: String!, saltNonce: UInt32!, connection: Ethers_Connection, txOptions: Ethers_TxOptions): String!
    proxyCreationCode(address: String!, connection: Ethers_Connection): String!

    """
    GnosisSafeContractEthers methods
    """
    getVersion(address: String!, connection: Ethers_Connection): String!
    getAddress(address: String!, connection: Ethers_Connection): String!
    getNonce(address: String!, connection: Ethers_Connection): BigInt!
    
    getThreshold(address: String!, connection: Ethers_Connection): UInt32!
    getOwners(address: String!, connection: Ethers_Connection): [String!]!
    isOwner(address: String!, ownerAddress: String!, connection: Ethers_Connection): Boolean!

    getTransactionHash(safeAddress: String!, safeTransactionData: SafeTransactionData!, connection: Ethers_Connection): String!
    approvedHashes(address: String!, ownerAddress: String!, hash: String!, connection: Ethers_Connection): BigInt!
    approveHash(safeAddress: String!, hash: String!, options: TransactionOptions, connection: Ethers_Connection): Ethers_TxReceipt!

    getModules(address: String!, connection: Ethers_Connection): [String!]!
    isModuleEnabled(address: String!, moduleAddress: String!, connection: Ethers_Connection): Boolean!

    execTransaction(safeAddress: String!, safeTransaction: SafeTransaction!, txOptions: Ethers_TxOptions, connection: Ethers_Connection): Ethers_TxReceipt!

    encode(method: String!, args: [String!]!): String!
    estimateGas(address: String!, method: String!, args: [String!]!, connection: Ethers_Connection): BigInt!

    getSafeContractNetworks(
        version: String!,
        chainId: String!,
        isL1Safe: Boolean,
        filter: ContractNetworksFilter
    ): ContractNetworksConfig!

    encodeExecTransaction(
        safeAddress: String!,
        safeTransaction: SafeTransaction!
    ): String!

}

type ContractNetworksConfig {
    multiSendAddress: String
    multiSendCallOnlyAddress: String
    safeMasterCopyAddress: String
    safeProxyFactoryAddress: String
    fallbackHandlerAddress: String
}

type ContractNetworksFilter {
    multiSendAddress: Boolean!
    multiSendCallOnlyAddress: Boolean!
    safeMasterCopyAddress: Boolean!
    safeProxyFactoryAddress: Boolean!
    fallbackHandlerAddress: Boolean!
}