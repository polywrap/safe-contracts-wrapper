"""
import {
    Module,
    Connection,
    Log,
    TxRequest,
    TxReceipt,
    TxResponse,
    TxOptions,
    StaticTxResult
} into Ethers from "wrap://ens/ethers.wraps.eth:0.1.0"
import { Module } into SafeContracts from "wrap://ens/safe.wraps.eth:contracts@0.1.0"
import { Module } into EthersUtils from "wrap://ens/ethers.wraps.eth:utils@0.1.1"
import * into Datetime from "wrap://plugin/datetime"
"""

type Module {
    deploySafe(
        input: DeploymentInput!
        txOptions: Ethers_TxOptions
    ): String!

    predictSafeAddress(
        input: DeploymentInput!
    ): String!

    safeIsDeployed(
        safeAddress: String!
        connection: Ethers_Connection!
    ): Boolean!

    encodeDeploySafe(
        input: DeploymentInput!
    ): String!

    getSafeInitializer(
        config: SafeAccountConfig!
    ): String!
}

type DeploymentInput {
    safeAccountConfig: SafeAccountConfig!
    safeDeploymentConfig: SafeDeploymentConfig
    customContractAddresses: CustomContract
    connection: Ethers_Connection
}

enum OperationType {
    Call,
    DelegateCall
}

type CustomContract {
    proxyFactoryContract: String
    safeFactoryContract: String
}

type DeploymentPayload {
    safeContractAddress: String!
    safeFactoryContractAddress: String!
    initializer: String!
    saltNonce: String!
}

type SafeAccountConfig {
    owners: [String!]!
    threshold: UInt!
    to: String
    data: String
    fallbackHandler: String
    paymentToken: String
    payment: BigInt
    paymentReceiver: String
}

type SafeDeploymentConfig {
    saltNonce: String!
    isL1Safe: Boolean
    version: String
}

type MetaTransactionData {
    to: String!
    value: String!
    data: String!
    operation: OperationType
}

type SafeTransactionData implements MetaTransactionData {
    safeTxGas: BigInt!
    baseGas: BigInt!
    gasPrice: BigInt!
    gasToken: String!
    refundReceiver: String!
    nonce: BigInt!
}

type SafeTransactionDataPartial implements MetaTransactionData {
    safeTxGas: BigInt
    baseGas: BigInt
    gasPrice: BigInt
    gasToken: String
    refundReceiver: String
    nonce: BigInt
}


type BaseTransactionResult {
    hash: String!
}

type TransactionResult implements BaseTransactionResult {
    receipt: Ethers_TxReceipt
    transactionResponse: Ethers_TxResponse
    #options: TransactionOptions
}

type TransactionOptions {
    from: String
    gas: BigInt
    gasLimit: BigInt
    gasPrice: BigInt
    maxFeePerGas: BigInt
    maxPriorityFeePerGas: BigInt
}

type Eip3770Address {
    prefix: String!
    address: String!
}
